#ifndef SRC_ENC_VAL
#define SRC_ENC_VAL

#include "memory.h"
#include <logger.h>
#include <nuv.h>

template<typename T, const char* SIG_CONSTRUCT, const char* SIG_DECRYPT, const char* SIG_SET>
struct enc_val {
	nuv::string* comment;
	T splice_a;
	T splice_b;
	size_t key;

	bool isDeleted() {
		return *(int*)this == 0xFFFFFFFF;
	}
	enc_val<T, SIG_CONSTRUCT, SIG_DECRYPT, SIG_SET>(T starting_value) {
		typedef void(__fastcall create_fun)(struct enc_val<T, SIG_CONSTRUCT, SIG_DECRYPT, SIG_SET>*, T*, char*);
		static create_fun* create;

		create = (create_fun*)memory::FindSig(SIG_CONSTRUCT);
		if (!create) {
			ilog(LogLevel::Error, "FATAL: create enc val couldn't be found? This is fatal! Expect a crash!");
			return;
		}
		create(this, &starting_value, nullptr);
	};
	T decrypt_value() {
		typedef float(__fastcall decrypt_fun)(struct enc_val<T, SIG_CONSTRUCT, SIG_DECRYPT, SIG_SET>*);
		static decrypt_fun* decrypt;

		decrypt = (decrypt_fun*)memory::FindSig(SIG_DECRYPT);
		if (!decrypt) {
			ilog(LogLevel::Error, "FATAL: decrypt couldn't be found? This is fatal! Expect a crash!");
			return 0;
		}
		if (isDeleted()) {
			ilog(LogLevel::Error, "B2C Tried to decrypt a deleted value... uh oh! This should be handled, but a crash may still occour!");
			return 0;
		}
		return decrypt(this);
	};
	void set_value(T value) {
		typedef void(__fastcall set_fun)(struct enc_val*, T*);
		static set_fun* set_enc;

		set_enc = (set_fun*)memory::FindSig(SIG_SET);
		if (!set_enc) {
			ilog(LogLevel::Error, "FATAL: set_enc couldn't be found? This is fatal! Expect a crash!");
			return;
		}
		if (isDeleted()) {
			ilog(LogLevel::Error, "B2C Tried to modify a deleted value... uh oh! This should be handled, but a crash may still occour!");
			return;
		}
		set_enc(this, &value);
	};
	enc_val<T, SIG_CONSTRUCT, SIG_DECRYPT, SIG_SET> operator=(T value) {
		this->set_value(value);
		return *this;
	};
	enc_val<T, SIG_CONSTRUCT, SIG_DECRYPT, SIG_SET> operator=(enc_val<T, SIG_CONSTRUCT, SIG_DECRYPT, SIG_SET>& value) {
		*this = value.decrypt_value();
		return *this;
	};
	T operator+(T rhs) {
		return this->decrypt_value() + rhs;
	}
	void operator+=(T value) {
		*this = this->decrypt_value() + value;
	};
	bool operator<(T value) {
		return this->decrypt_value() < value;
	}
};

static const char SIG_FLOAT_CONSTRUCT[] = "48 89 ?? ?? ?? 56 57 41 ?? 48 83 EC ?? 49 8B ?? 48 8B ?? 48 8B ?? 48 89 ?? ?? ?? E8 ?? ?? ?? ?? C7 43 08 ?? ?? ?? ?? C6 43 08 ?? F6 53 ?? F6 53 ?? F6 53 ?? 48 8D ?? ?? E8 ?? ?? ?? ?? 90 48 85 ?? 0F 84 ?? ?? ?? ?? 48 C7 44 24 40 ?? ?? ?? ?? 48 C7 44 24 48 ?? ?? ?? ?? C6 44 24 30 ?? 49 C7 C0 ?? ?? ?? ?? 49 FF ?? 42 80 3C 07 ?? 75 ?? 48 8B ?? 48 8D ?? ?? ?? E8 ?? ?? ?? ?? 90 48 8D ?? ?? ?? 48 8D ?? ?? ?? E8 ?? ?? ?? ?? 48 8B ?? ?? ?? B8 ?? ?? ?? ?? F0 0F ?? ?? ?? 48 8B ?? ?? 48 8B ?? ?? ?? 48 89 ?? ?? 48 89 ?? ?? ?? 48 8D ?? ?? ?? E8 ?? ?? ?? ?? 48 8D ?? ?? ?? E8 ?? ?? ?? ?? 90 48 8B ?? ?? ?? 48 83 FA ?? 72 ?? 48 FF ?? 48 8B ?? ?? ?? 48 8B ?? 48 81 FA ?? ?? ?? ?? 72 ?? 48 83 C2 ?? 48 8B ?? ?? 48 2B ?? 48 83 C0 ?? 48 83 F8 ?? 76 ?? FF 15 ?? ?? ?? ?? CC E8 ?? ?? ?? ?? 48 8B ?? 48 8B ?? E8 ?? ?? ?? ?? 90 48 8B ?? 48 8B ?? ?? ?? 48 83 C4 ?? 41 ?? 5F 5E C3 CC 48 89 ?? ?? ?? 48 89 ?? ?? ?? 57 48 83 EC ?? 0F 29";
static const char SIG_FLOAT_DECRYPT[] = "48 81 ?? ?? ?? ?? ?? ?? 29 ?? ?? ?? 48 8B ?? ?? ?? ?? ?? 48 33 ?? ?? 89 ?? ?? ?? 0F ?? ?? ?? C0";
static const char SIG_FLOAT_SET[] = "?? 89 ?? ?? ?? 57 48 83 ?? ?? 0F ?? ?? 48 8B ?? C0 C0 ?? 48 8B ?? ?? 41 ?? 0F ?? ?? ?? C0 C0 ?? ?? 41 ?? 0F ?? ?? ?? C0 C0 ?? ?? 41 ?? 0F ?? ?? ?? C0 C0 ?? ?? 41 ?? FF ?? ?? ?? ?? ?? 44 8B ?? B8 01 ?? ?? ?? 41 ?? ?? C1 FA ?? 8B CA C1 E9 ?? 03 D1 69 CA FF ?? ?? ?? 44 2B ?? 66 41 ?? ?? ?? 0F 5B ?? ?? 0F ?? ?? ?? ?? 0F ?? ?? ?? ?? F6 ?? ?? 47 ?? 0F ?? ?? ?? ?? F6 ?? ?? 47 ?? 0F ?? ?? ?? ?? F6 ?? ?? 47 ?? 0F ?? ?? ?? ?? F6 ?? ?? 47 ?? 0F ?? ?? C0 C0 ?? ?? 47 ?? 0F ?? ?? ?? C0 C0 ?? ?? 47 ?? 0F ?? ?? ?? C0 C0 ?? ?? 47 ?? 0F ?? ?? ?? 48 ?? ?? ?? ?? C0 C0 ?? ?? 47 ?? 48 83";
#define enc_val_float enc_val<float, SIG_FLOAT_CONSTRUCT, SIG_FLOAT_DECRYPT, SIG_FLOAT_SET>
static const char SIG_INT_CONSTRUCT[] = "48 89 ?? ?? ?? 56 57 41 ?? 48 83 EC ?? 49 8B ?? 48 8B ?? 48 8B ?? 48 89 ?? ?? ?? E8 ?? ?? ?? ?? C7 43 08 ?? ?? ?? ?? C6 43 08 ?? F6 53 ?? F6 53 ?? F6 53 ?? 48 8D ?? ?? E8 ?? ?? ?? ?? 90 48 85 ?? 0F 84 ?? ?? ?? ?? 48 C7 44 24 40 ?? ?? ?? ?? 48 C7 44 24 48 ?? ?? ?? ?? C6 44 24 30 ?? 49 C7 C0 ?? ?? ?? ?? 49 FF ?? 42 80 3C 07 ?? 75 ?? 48 8B ?? 48 8D ?? ?? ?? E8 ?? ?? ?? ?? 90 48 8D ?? ?? ?? 48 8D ?? ?? ?? E8 ?? ?? ?? ?? 48 8B ?? ?? ?? B8 ?? ?? ?? ?? F0 0F ?? ?? ?? 48 8B ?? ?? 48 8B ?? ?? ?? 48 89 ?? ?? 48 89 ?? ?? ?? 48 8D ?? ?? ?? E8 ?? ?? ?? ?? 48 8D ?? ?? ?? E8 ?? ?? ?? ?? 90 48 8B ?? ?? ?? 48 83 FA ?? 72 ?? 48 FF ?? 48 8B ?? ?? ?? 48 8B ?? 48 81 FA ?? ?? ?? ?? 72 ?? 48 83 C2 ?? 48 8B ?? ?? 48 2B ?? 48 83 C0 ?? 48 83 F8 ?? 76 ?? FF 15 ?? ?? ?? ?? CC E8 ?? ?? ?? ?? 48 8B ?? 48 8B ?? E8 ?? ?? ?? ?? 90 48 8B ?? 48 8B ?? ?? ?? 48 83 C4 ?? 41 ?? 5F 5E C3 CC 48 89 ?? ?? ?? 48 89 ?? ?? ?? 57 48 83 EC ?? 48 8B";
static const char SIG_INT_DECRYPT[] = "40 53 48 83 ec 50 48 8b 05 ?? ?? ?? 01 48 33 c4 48 89 44 24 48 4c 8b c1 8b 09 89 4c 24 20 41 0f b6 40 04 48 8d 14 85 00 00 00 00 4c 8d 0d ?? ?? ?? 01 42 0f b6 04 0a 32 c1 88 44 24 20 42 0f b6 44 0a 01 30 44 24 21 42 0f b6 44 0a 02 30 44 24 22 42 0f b6 44 0a 03 30 44 24 23 41 8b 40 08 89 44 24 24 f6 d0 88 44 24 24 f6 54 24 25 f6 54 24 26 f6 54 24 27 8b 5c 24 20 3b 5c 24 24 74 67 49 8b 50 10 48 8d 4c 24 28 e8 ?? bb ff ff 90";
static const char SIG_INT_SET[] = "48 89 ?? ?? ?? 57 48 83 EC ?? 8B 02 48 8B ?? 89 01 48 8B ?? FF 15 ?? ?? ?? ?? 25 ?? ?? ?? ?? 7D ?? FF C8 83 C8 ?? FF C0 0F B6 ?? 48 8D ?? ?? ?? ?? ?? 88 53 ?? 0F B6 ?? ?? 30 03 0F B6 ?? ?? ?? 30 43 ?? 0F B6 ?? ?? ?? 30 43 ?? 0F B6 ?? ?? ?? 30 43 ?? 8B 07 89 43 ?? F6 D0 88 43 ?? F6 53 ?? F6 53 ?? F6 53 ?? 8B 07 89 43 ?? 48 8B ?? ?? ?? 48 83 C4 ?? 5F C3 CC CC CC CC CC CC CC CC CC CC 48 89 ?? ?? ?? 48 89 ?? ?? ?? 56 57 41 ?? 48 83 EC";
#define enc_val_int enc_val<int, SIG_INT_CONSTRUCT, SIG_INT_DECRYPT, SIG_INT_SET>

/*
struct enc_val_float{
	size_t comment;
	size_t value;
	size_t key;

	enc_val_float(float starting) {
		typedef void(__fastcall create_fun)(struct enc_val_float*, float*, char*);
		static create_fun* create;

		create = (create_fun*)memory::FindSig("48 89 ?? ?? ?? 56 57 41 ?? 48 83 EC ?? 49 8B ?? 48 8B ?? 48 8B ?? 48 89 ?? ?? ?? E8 ?? ?? ?? ?? C7 43 08 ?? ?? ?? ?? C6 43 08 ?? F6 53 ?? F6 53 ?? F6 53 ?? 48 8D ?? ?? E8 ?? ?? ?? ?? 90 48 85 ?? 0F 84 ?? ?? ?? ?? 48 C7 44 24 40 ?? ?? ?? ?? 48 C7 44 24 48 ?? ?? ?? ?? C6 44 24 30 ?? 49 C7 C0 ?? ?? ?? ?? 49 FF ?? 42 80 3C 07 ?? 75 ?? 48 8B ?? 48 8D ?? ?? ?? E8 ?? ?? ?? ?? 90 48 8D ?? ?? ?? 48 8D ?? ?? ?? E8 ?? ?? ?? ?? 48 8B ?? ?? ?? B8 ?? ?? ?? ?? F0 0F ?? ?? ?? 48 8B ?? ?? 48 8B ?? ?? ?? 48 89 ?? ?? 48 89 ?? ?? ?? 48 8D ?? ?? ?? E8 ?? ?? ?? ?? 48 8D ?? ?? ?? E8 ?? ?? ?? ?? 90 48 8B ?? ?? ?? 48 83 FA ?? 72 ?? 48 FF ?? 48 8B ?? ?? ?? 48 8B ?? 48 81 FA ?? ?? ?? ?? 72 ?? 48 83 C2 ?? 48 8B ?? ?? 48 2B ?? 48 83 C0 ?? 48 83 F8 ?? 76 ?? FF 15 ?? ?? ?? ?? CC E8 ?? ?? ?? ?? 48 8B ?? 48 8B ?? E8 ?? ?? ?? ?? 90 48 8B ?? 48 8B ?? ?? ?? 48 83 C4 ?? 41 ?? 5F 5E C3 CC 48 89 ?? ?? ?? 48 89 ?? ?? ?? 57 48 83 EC ?? 0F 29");
		create(this, &starting, nullptr);
	}

	float decrypt_value() {
		typedef float(__fastcall decrypt_fun)(struct enc_val_float*);
		static decrypt_fun* decrypt;

		decrypt = (decrypt_fun*)memory::FindSig("48 83 EC ?? 0F 29 ?? ?? ?? 48 8B ?? ?? ?? ?? ?? 48 33 ?? 48 89 ?? ?? ?? 8B 41");
		return decrypt(this);
	}

	enc_val_float operator=(float val) {
		typedef void(__fastcall set_fun)(struct enc_val_float*, float*);
		static set_fun* set_enc;

		set_enc = (set_fun*)memory::FindSig("48 89 ?? ?? ?? 57 48 83 EC ?? 8B 02 48 8B ?? C1 C8 ?? 48 8B ?? 89 41 ?? FF 15 ?? ?? ?? ?? 44 8B ?? B8 ?? ?? ?? ?? 41 F7 ?? C1 FA ?? 44 8B ?? 41 C1 E8 ?? 41 03 ?? 69 CA ?? ?? ?? ?? 44 2B ?? 66 41");
		set_enc(this, &val);
		return *this;
	}
};

struct enc_val_int {
	size_t comment;
	size_t value;
	size_t key;

	enc_val_int(int starting) {
		typedef void(__fastcall create_fun)(struct enc_val_int*, int*, char*);
		static create_fun* create;

		create = (create_fun*)memory::FindSig("48 89 ?? ?? ?? 56 57 41 ?? 48 83 EC ?? 49 8B ?? 48 8B ?? 48 8B ?? 48 89 ?? ?? ?? E8 ?? ?? ?? ?? C7 43 08 ?? ?? ?? ?? C6 43 08 ?? F6 53 ?? F6 53 ?? F6 53 ?? 48 8D ?? ?? E8 ?? ?? ?? ?? 90 48 85 ?? 0F 84 ?? ?? ?? ?? 48 C7 44 24 40 ?? ?? ?? ?? 48 C7 44 24 48 ?? ?? ?? ?? C6 44 24 30 ?? 49 C7 C0 ?? ?? ?? ?? 49 FF ?? 42 80 3C 07 ?? 75 ?? 48 8B ?? 48 8D ?? ?? ?? E8 ?? ?? ?? ?? 90 48 8D ?? ?? ?? 48 8D ?? ?? ?? E8 ?? ?? ?? ?? 48 8B ?? ?? ?? B8 ?? ?? ?? ?? F0 0F ?? ?? ?? 48 8B ?? ?? 48 8B ?? ?? ?? 48 89 ?? ?? 48 89 ?? ?? ?? 48 8D ?? ?? ?? E8 ?? ?? ?? ?? 48 8D ?? ?? ?? E8 ?? ?? ?? ?? 90 48 8B ?? ?? ?? 48 83 FA ?? 72 ?? 48 FF ?? 48 8B ?? ?? ?? 48 8B ?? 48 81 FA ?? ?? ?? ?? 72 ?? 48 83 C2 ?? 48 8B ?? ?? 48 2B ?? 48 83 C0 ?? 48 83 F8 ?? 76 ?? FF 15 ?? ?? ?? ?? CC E8 ?? ?? ?? ?? 48 8B ?? 48 8B ?? E8 ?? ?? ?? ?? 90 48 8B ?? 48 8B ?? ?? ?? 48 83 C4 ?? 41 ?? 5F 5E C3 CC 48 89 ?? ?? ?? 48 89 ?? ?? ?? 57 48 83 EC ?? 48 8B");
		create(this, &starting, nullptr);
	}

	int decrypt_value() {
		typedef int(__fastcall decrypt_fun)(struct enc_val_int*);
		static decrypt_fun* decrypt;

		decrypt = (decrypt_fun*)memory::FindSig("40 53 48 83 ec 50 48 8b 05 ?? ?? ?? 01 48 33 c4 48 89 44 24 48 4c 8b c1 8b 09 89 4c 24 20 41 0f b6 40 04 48 8d 14 85 00 00 00 00 4c 8d 0d ?? ?? ?? 01 42 0f b6 04 0a 32 c1 88 44 24 20 42 0f b6 44 0a 01 30 44 24 21 42 0f b6 44 0a 02 30 44 24 22 42 0f b6 44 0a 03 30 44 24 23 41 8b 40 08 89 44 24 24 f6 d0 88 44 24 24 f6 54 24 25 f6 54 24 26 f6 54 24 27 8b 5c 24 20 3b 5c 24 24 74 67 49 8b 50 10 48 8d 4c 24 28 e8 ?? bb ff ff 90");
		//decrypt = (decrypt_fun*)memory::FindSig("40 ?? 48 8B ?? 48 83 ?? ?? ?? 29 ?? ?? ?? 48 8B ?? ?? ?? ?? ?? 48 33 ?? ?? 89 ?? ?? 48 8B ?? F3");
		return decrypt(this);
	}

	enc_val_int operator=(int val) {
		typedef void(__fastcall set_fun)(struct enc_val_int*, int*);
		static set_fun* set_enc;

		set_enc = (set_fun*)memory::FindSig("48 89 ?? ?? ?? 57 48 83 EC ?? 8B 02 48 8B ?? 89 01 48 8B ?? FF 15 ?? ?? ?? ?? 25 ?? ?? ?? ?? 7D ?? FF C8 83 C8 ?? FF C0 0F B6 ?? 48 8D ?? ?? ?? ?? ?? 88 53 ?? 0F B6 ?? ?? 30 03 0F B6 ?? ?? ?? 30 43 ?? 0F B6 ?? ?? ?? 30 43 ?? 0F B6 ?? ?? ?? 30 43 ?? 8B 07 89 43 ?? F6 D0 88 43 ?? F6 53 ?? F6 53 ?? F6 53 ?? 8B 07 89 43 ?? 48 8B ?? ?? ?? 48 83 C4 ?? 5F C3 CC CC CC CC CC CC CC CC CC CC 48 89 ?? ?? ?? 48 89 ?? ?? ?? 56 57 41 ?? 48 83 EC");
		set_enc(this, &val);
		return *this;
	}
};
*/
#endif /* SRC_ENC_VAL */
